package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	
	"github.com/go-sql-driver/mysql"
)

var db *sql.DB

type Album struct {
	ID		int64
	Title	string
	Artist	string
	Price	float32
}

func main() {
	// Capture connection properties.
	cfg := mysql.Config{
		User:	os.Getenv("DBUSER"),
		Passwd: os.Getenv("DBPASS"),
		Net:	"tcp",
		Addr:	"127.0.0.1:3306",
		DBName:	"recordings",
		AllowNativePasswords: true,
		// AllowOldPasswords: true,
	}

	// Get a database handle.
	var err error
	db, err = sql.Open("mysql", cfg.FormatDSN())
	if err != nil {
		log.Fatal(err)
	}

	pingErr := db.Ping()
	if pingErr != nil {
		log.Fatal(pingErr)
	}

	fmt.Println("Connected!")

	artistName := "John Coltrane"
	fmt.Printf("Getting albums by artist %q...", artistName)

	albums, err := albumsByArtist(artistName)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("\nAlbums found: %v\n", albums)
	printAllAlbums(albums)

	fmt.Println("\nGetting all albums...")

	albums, err = getAllAlbums()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println()
	printAllAlbums(albums)
}

func printAllAlbums(albums []Album) {
	for index, album := range(albums) {
		fmt.Printf("%v : %v | %q | %v | %v\n", index + 1, album.ID, album.Title, album.Artist, album.Price)
	}
}

func albumsByArtist(name string) ([]Album, error) {
	// An albums slice to hold data from returned rows.
	var albums []Album

	rows, err := db.Query("SELECT * FROM album WHERE artist = ?", name)
	if err != nil {
		return nil, fmt.Errorf("albumsByArtist(%q): error: %v", name, err)
	}

	defer rows.Close()

	for rows.Next() {
		var alb Album
		if err := rows.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price); err != nil {
			return nil, fmt.Errorf("albumsByArtist(%q): error: %v", name, err)
		}
		albums = append(albums, alb)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("albumsByArtist(%q): error: %v", name, err)
	}

	return albums, nil
}

func getAllAlbums() ([]Album, error) {
	rows, err := db.Query("SELECT * FROM album")
	if err != nil {
		log.Fatal(err)
	}

	defer rows.Close()

	var albums []Album
	for rows.Next() {
		var alb Album
		rows.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price)
		albums = append(albums, alb)
	}

	if err := rows.Err(); err != nil {
		log.Fatal(err)
	}

	return albums, nil
}
